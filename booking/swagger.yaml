swagger: "2.0"
info:
  version: 1.0.0
  description: "This is a timeslot API"
  title: "Booking API "
  contact:
    email: "morgan.liang@unsw.edu.au"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "timeslot.swagger.io"
basePath: "/v4"
tags:
- name: "Timeslot"
  description: "Timeslot service"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "Movies"
  description: "Movie service"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"


schemes:
- "https"
paths:
  /timeslots:
    get:
      tags:
      - "Timeslot"
      summary: "return all available timeslots"
      produces:
      - "application/json"
      
      responses:
        "200":
          description: "successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/timeslot"
              
        "500":
          description: "Internal server error"
  /timeslots/{timeslot_id}:
    get:
      tags:
      - "Timeslot"
      summary: "return timeslot with id"
      
      produces:
      - "application/json"
      parameters:
      - name: "timeslot_id"
        in: "path"
        description: "target timeslot id"
        required: true
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/timeslot'
              
        500:
          description: "Internal server error"
        
        404:
          description: "Not Found"
  
  /timeslots/{user_id}/booked_tickets:    
    get:
      tags:
      - "Timeslot"
      summary: "get all current tickets booked for user. User to select one to delete"
      
      produces:
      - "application/json"
      parameters:
      - name: "user_id"
        in: "path"
        description: "user id"
        required: true
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/timeslot"
              
        500:
          description: "Internal server error"
        
        404:
          description: "Not Found"
  
      
  /timeslots/{user_id}/{timeslot_id}/delete:    
    put:
      tags:
      - "Timeslot"
      summary: "delete booking for timeslot with given id"
      
      produces:
      - "application/json"
      parameters:
      - name: "timeslot_id"
        in: "path"
        description: "target timeslot id"
        required: true
        type: "integer"
      - name: "user_id"
        in: "path"
        description: "user id"
        required: true
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/timeslot'
              
        500:
          description: "Internal server error"
        
        404:
          description: "Not Found"
          
  /timeslots/{timeslot_id}/{user_id}/{people}/add:    
    put:
      tags:
      - "Timeslot"
      summary: "confirm booking to timeslot but adding user id"
      
      produces:
      - "application/json"
      parameters:
      - name: "timeslot_id"
        in: "path"
        description: "target timeslot id"
        required: true
        type: "integer"
      - name: "user_id"
        in: "path"
        description: "user id"
        required: true
        type: "integer"
      - name: "people"
        in: "path"
        description: "people id"
        required: true
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/timeslot'
              
        500:
          description: "Internal server error"
        
        404:
          description: "Not Found"

  /timeslots/{movie_name}/{user_id}/{people}:    
    get:
      tags:
      - "Timeslot"
      summary: "get all available timeslots for user to select"
      
      produces:
      - "application/json"
      parameters:
      - name: "movie_name"
        in: "path"
        description: "target timeslot id"
        required: true
        type: "string"
      - name: "user_id"
        in: "path"
        description: "user id"
        required: true
        type: "integer"
      - name: "people"
        in: "path"
        description: "people id"
        required: true
        type: "integer"
      responses:
        200:
          description: "successful operation"

          schema:
            type: array
            items:
              $ref: "#/definitions/timeslot"
              
        500:
          description: "Internal server error"
        
        404:
          description: "Not Found"
          
  
  /movie:
    get:
      tags:
      - "Movies"
      summary: "Get all movies info"
      produces:
      - "application/json"
      
      responses:
        200:
          description: "successful operation"
          schema:
            type: array
            items: 
              $ref: '#/definitions/movie'
              
        500:
          description: "Internal server error"
        
        404:
          description: "Not Found"
          
  /movie/{movie_name}:
    get:
      tags:
      - "Movies"
      summary: "Get information on movie name"
      produces:
      - "application/json"
      parameters:
      - name: "movie_name"
        in: "path"
        description: "target movie name"
        required: true
        type: string
      responses:
        200:
          description: "successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/timeslot"
            
        400:
          description: "Invalid ID supplied"
  
      
  
  
    
definitions:
  movie:
    type: object
    properties:
      m_id:
        type: integer
        example: 1
      m_name:
        type: string
        example: "The Matrix"
      description:
        type: string
        example: "This is the future movie"
      timeslots:
        type: array
        items:
          $ref: "#/definitions/timeslot"
    required:
    - m_id
    - m_name
    - description
      
    

    # Day 1-Monday, 2-Tuesday, 3-Wed, 4-Thur, 5-Fri, 6-Sat, NO SUN
  timeslot:
    type: object
    properties:
      timeslot_id:
        type: integer
        example: 1
      cinema_name:
        type: string
        example: "Broadway"
      theatre_type:
        type: string
        enum:
          - "Lux"
          - "Saver"
          - "VMax"
        default: "Saver"
      start_time:
        type: string
        example: "11:00"
      end_time:
        type: string
        example: "14:00"
      day:
        type: string
        enum:
          - "mon"
          - "tue"
          - "wed"
          - "thu"
          - "fri"
          - "sat"
      max_seats:
        type: integer
        example: 100
      avail_seats:
        type: integer
        example: 50
      tickets:
        type: array
        items:
          $ref: "#/definitions/ticket"
      movie_name:
        type: string

    required:
    - timeslot_id
    - cinema_name
    - theatre_type
    - start_time
    - end_time
    - max_seats
    - avail_seats
    - day
    - movie_name

  ticket:
    type: object
    properties:
      ticketID:
        type: integer
        example: 100
      people:
        type: integer
        example: 20
        default: 1
      holderName:
        type: string
        example: "Jake"
      holderID:
        type: integer
        example: 123
      timeslot_id:
        type: integer
        example: 1
        
    required:
    - ticketID
    - people
    - holderID
    - timeslot_id
          
             
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
